{"meta":{"title":"Crispin - Embedded Software Developer","subtitle":null,"description":null,"author":"Crispin Au","url":"http://crispino.github.io"},"pages":[{"title":"关于","date":"2018-09-07T00:48:30.718Z","updated":"2018-09-07T00:48:30.718Z","comments":false,"path":"about/index.html","permalink":"http://crispino.github.io/about/index.html","excerpt":"","text":"123456789101112131415161718&#123; &quot;Name&quot;: &quot;Crispin&quot;, &quot;Profession&quot;: &quot;Embedded Software Developer&quot;, &quot;Experience&quot;: &quot;&gt; 11 years&quot;, &quot;github&quot;: &quot;https://github.com/crispino&quot;, &quot;Blog&quot;: &quot;https://crispino.github.io&quot;, &quot;Email&quot;: &quot;crispino@foxmail.com&quot;, &quot;Skills&quot;: [ [&quot;Linux&quot;, &quot;Openwrt&quot;, &quot;Android&quot;], [&quot;C/C++&quot;, &quot;Java&quot;, &quot;Shell&quot;], &#123;&quot;Network Protocol Stack&quot;: &quot;L2, L3&quot;&#125;, [&quot;802.11&quot;], [&quot;GPIO&quot;, &quot;I2C&quot;, &quot;SPI&quot;], [&quot;Html&quot;, &quot;Css&quot;, &quot;Javascript&quot;], [&quot;Git&quot;, &quot;Svn&quot;] ]&#125;"},{"title":"书单","date":"2018-09-06T01:46:31.040Z","updated":"2018-09-06T01:46:31.040Z","comments":false,"path":"books/index.html","permalink":"http://crispino.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-09-06T01:46:31.041Z","updated":"2018-09-06T01:46:31.041Z","comments":false,"path":"categories/index.html","permalink":"http://crispino.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-09-06T01:46:31.042Z","updated":"2018-09-06T01:46:31.042Z","comments":true,"path":"links/index.html","permalink":"http://crispino.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-09-06T01:46:31.043Z","updated":"2018-09-06T01:46:31.043Z","comments":false,"path":"repository/index.html","permalink":"http://crispino.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-09-06T08:40:14.792Z","updated":"2018-09-06T01:46:31.046Z","comments":false,"path":"tags/index.html","permalink":"http://crispino.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ubuntu 16.04 安装 samba","slug":"ubuntu16.04安装samba","date":"2016-11-15T02:12:36.000Z","updated":"2018-09-07T06:23:30.597Z","comments":true,"path":"2016/11/15/ubuntu16.04安装samba/","link":"","permalink":"http://crispino.github.io/2016/11/15/ubuntu16.04安装samba/","excerpt":"","text":"安装1234sudo apt-get install sambacd /etc/sambasudo cp smb.conf smb.conf.baksudo vi smb.conf 配置文件1234567# crispin samba[RootFS]comment = Root filesystempath = /browseable = yeswritable = yesvalid users = crispin 添加用户12sudo adduser usrsamba (crispin安装时已经添加了，可以不执行该命令)sudo smbpasswd -a usrsamba","categories":[{"name":"工具","slug":"工具","permalink":"http://crispino.github.io/categories/工具/"}],"tags":[{"name":"samba","slug":"samba","permalink":"http://crispino.github.io/tags/samba/"}]},{"title":"骇客交锋","slug":"骇客交锋","date":"2015-06-15T02:12:30.000Z","updated":"2018-09-07T07:00:56.755Z","comments":true,"path":"2015/06/15/骇客交锋/","link":"","permalink":"http://crispino.github.io/2015/06/15/骇客交锋/","excerpt":"","text":"在影评家的心目中，迈克尔·曼的《骇客交锋》并不是什么杰作。但是，当 Google Chrome 安全团队的主管 Parisa Tabriz 组织了 200 多名安全专家观看了首映之后，这些人一致认为，它是一部不错的电影，甚至可能是最好的黑客电影之一。","categories":[{"name":"娱乐","slug":"娱乐","permalink":"http://crispino.github.io/categories/娱乐/"}],"tags":[{"name":"电影","slug":"电影","permalink":"http://crispino.github.io/tags/电影/"}]},{"title":"MT7628an WPS配置命令","slug":"MT7628an WPS配置命令","date":"2015-04-19T03:01:30.000Z","updated":"2018-09-07T06:48:44.648Z","comments":true,"path":"2015/04/19/MT7628an WPS配置命令/","link":"","permalink":"http://crispino.github.io/2015/04/19/MT7628an WPS配置命令/","excerpt":"","text":"Server / Registrar123iwpriv ra0 set WscConfMode=7iwpriv ra0 set WscMode=2iwpriv ra0 set WscGetConf=1 Client /Enrollee1234ifconfig apcli0 upiwpriv apcli0 set WscConfMode=1iwpriv apcli0 set WscMode=2iwpriv apcli0 set WscGetConf=1","categories":[{"name":"工作","slug":"工作","permalink":"http://crispino.github.io/categories/工作/"}],"tags":[{"name":"WPS","slug":"WPS","permalink":"http://crispino.github.io/tags/WPS/"}]},{"title":"Openwrt文件系统中/etc/config配置文件的动态生成","slug":"Openwrt文件系统中config配置文件的动态生成","date":"2015-04-12T03:01:30.000Z","updated":"2018-09-07T06:34:49.777Z","comments":true,"path":"2015/04/12/Openwrt文件系统中config配置文件的动态生成/","link":"","permalink":"http://crispino.github.io/2015/04/12/Openwrt文件系统中config配置文件的动态生成/","excerpt":"","text":"openwrt的network文件，或者说是在/etc/config目录下的文件，都是动态生成的。 脚本的函数定义在package/base-files/files/lib/functions目录中，有以下几个文件： 12ouyangping@ubuntu:~/openwrt-3.10.14/package/base-files/files/lib/functions$ lsleds.sh network.sh preinit.sh service.sh system.sh uci-defaults.sh 其中uci-default.sh会生成默认的/et/config目录下的文件，而其他文件是它的库","categories":[{"name":"工作","slug":"工作","permalink":"http://crispino.github.io/categories/工作/"}],"tags":[{"name":"openwrt","slug":"openwrt","permalink":"http://crispino.github.io/tags/openwrt/"}]},{"title":"Keep It Simple, Stupid!","slug":"Keep It Simple,Stupid!","date":"2012-05-09T02:51:31.000Z","updated":"2018-09-07T07:19:11.917Z","comments":true,"path":"2012/05/09/Keep It Simple,Stupid!/","link":"","permalink":"http://crispino.github.io/2012/05/09/Keep It Simple,Stupid!/","excerpt":"","text":"Subject: Focus on Problems vs. Focus on Solutions – Don’t miss reading One of the most memorable case studies on Japanese management was the case of the empty soap box, which happened in one of Japan’s biggest cosmetics companies. The company received a complaint that a consumer had bought a soap box that was empty. Immediately the authorities isolated the problem to the assembly line, which transported all the packaged soap to the delivery department. For some reason, one soap box went through the assembly line empty. Management asked its engineers to solve the problem. Post-haste, the engineers worked hard to devise an X-ray machine with high-resolution monitors manned by two people to watch all the soap boxes that passed through the line to make sure they were not empty. No doubt, they worked hard and they worked fast but they spent whoopee amount to do so. But when a rank-and-file employee in a small company was posed with the same problem, did not get into complications of X-rays, etc but instead came out with another solution. He bought a strong industrial electric fan and pointed it at the assembly line. He switched the fan on, and as each soap box passed the fan, it simply blew the empty boxes out of the line.Moral of the story: KISS (Keep It Simple,Stupid) i.e. always look for simple solutions. Devise the simplest possible solution that solves the problem. When NASA began the launch of astronauts into space, they found out that the pens wouldn’t work at zero gravity (Ink won’t flow down to the writing surface). In order to solve this problem, it took them one decade and $12 million. They developed a pen that worked at zero gravity, upside down, underwater, in practically any surface including crystal and in a temperature range from below freezing to over 300 degrees C. And what did Russians do ………………………??Guest it!!ANSWER: The Russians used a Pencil !!!","categories":[],"tags":[{"name":"态度","slug":"态度","permalink":"http://crispino.github.io/tags/态度/"}]},{"title":"老鼠试毒瓶问题","slug":"老鼠试毒瓶问题","date":"2012-04-05T05:12:30.000Z","updated":"2018-09-07T05:24:34.748Z","comments":true,"path":"2012/04/05/老鼠试毒瓶问题/","link":"","permalink":"http://crispino.github.io/2012/04/05/老鼠试毒瓶问题/","excerpt":"","text":"题目 有 1000 个一模一样的瓶子，其中有 999 瓶是普通的水，有一瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡。现在，你只有 10 只小白鼠和一星期的时间，如何检验出哪个瓶子里有毒药？ 分析 这个问题的答案也堪称经典：把瓶子从 0 到 999 依次编号，然后全部转换为 10 位二进制数。让第一只老鼠喝掉1到1000所有二进制数右起第一位是 1 的瓶子，让第二只老鼠喝掉所有二进制数右起第二位是 1 的瓶子，等等。一星期后，如果第一只老鼠死了，就知道毒药瓶子的二进制编号中，右起第一位是 1 ；如果第二只老鼠没死，就知道毒药瓶子的二进制编号中，右起第二位是 0 ……每只老鼠的死活都能确定出 10 位二进制数的其中一位，由此便可知道毒药瓶子的编号了。 进一步现在，有意思的问题来了：如果你有两个星期的时间（换句话说你可以做两轮实验），为了从 1000 个瓶子中找出毒药，你最少需要几只老鼠？注意，在第一轮实验中死掉的老鼠，就无法继续参与第二次实验了。 答案：7 只老鼠就足够了。事实上，7 只老鼠足以从 3^7 = 2187 个瓶子中找出毒药来。首先，把所有瓶子从 0 到 2186 编号，然后全部转换为 7 位三进制数。现在，让第一只老鼠喝掉所有三进制数右起第一位是 2 的瓶子，让第二只老鼠喝掉所有三进制数右起第二位是 2 的瓶子，等等。一星期之后，如果第一只老鼠死了，就知道毒药瓶子的三进制编号中，右起第一位是 2 ；如果第二只老鼠没死，就知道毒药瓶子的三进制编号中，右起第二位不是 2，只可能是 0 或者 1 ……也就是说，每只死掉的老鼠都用自己的生命确定出了，三进制编号中自己负责的那一位是 2 ；但每只活着的老鼠都只能确定，它所负责的那一位不是 2 。于是，问题就归约到了只剩一个星期时的情况。在第二轮实验里，让每只活着的老鼠继续自己未完成的任务，喝掉它负责的那一位是 1 的所有瓶子。再过一星期，毒药瓶子的三进制编号便能全部揭晓了。 总结类似地，我们可以证明， n 只小白鼠 t 周的时间可以从 (t+1)^n 个瓶子中检验出毒药来。 总结：时间换取资源(老鼠)。","categories":[{"name":"算法","slug":"算法","permalink":"http://crispino.github.io/categories/算法/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://crispino.github.io/tags/算法/"}]},{"title":"Build NFS Environment","slug":"Build NFS Environment","date":"2009-10-12T08:12:36.000Z","updated":"2018-09-07T00:41:44.288Z","comments":true,"path":"2009/10/12/Build NFS Environment/","link":"","permalink":"http://crispino.github.io/2009/10/12/Build NFS Environment/","excerpt":"","text":"Board - NFS clientlinux kernel123File system -&gt; Network File System -&gt; NFS client support[*] NFS client support for NFS version 3[*] NFS client support for the NFSv3 ACL protocol externel busybox12Linux System Utilities -&gt; mount[*] Support mounting NFS file systems mount1mount -o nolock 192.168.1.25:/home/crispin/rtl819x/users/boa/html /web PC - NFS serverinstall software1sudo apt-get install nfs-kerenel-server nfs-common rpcbind create shared pathconfigure nfs file1add &apos;/home/crispin/rtl819x/users/boa/html * (rw, sync)&apos; to &apos;/etc/exports&apos; start nfs server12sudo /etc/init.d/nfs-kernel-server restartsudo exportfs -a","categories":[{"name":"工具","slug":"工具","permalink":"http://crispino.github.io/categories/工具/"}],"tags":[{"name":"NFS","slug":"NFS","permalink":"http://crispino.github.io/tags/NFS/"}]},{"title":"wireshark找不到网络接口的处理方法","slug":"Wireshark找不到网络接口","date":"2009-09-02T05:42:32.000Z","updated":"2018-09-07T00:41:57.179Z","comments":true,"path":"2009/09/02/Wireshark找不到网络接口/","link":"","permalink":"http://crispino.github.io/2009/09/02/Wireshark找不到网络接口/","excerpt":"","text":"方法一1net start npf 方法二 安装libpcap时选中开机启动","categories":[{"name":"工具","slug":"工具","permalink":"http://crispino.github.io/categories/工具/"}],"tags":[{"name":"wireshark","slug":"wireshark","permalink":"http://crispino.github.io/tags/wireshark/"}]},{"title":"Vim和Source Insight切换","slug":"Vim和Source Insight切换","date":"2009-08-15T08:12:36.000Z","updated":"2018-09-07T00:41:51.497Z","comments":true,"path":"2009/08/15/Vim和Source Insight切换/","link":"","permalink":"http://crispino.github.io/2009/08/15/Vim和Source Insight切换/","excerpt":"","text":"Source Insight 在Source Insight中按F12调用gvim，打开对应文件，跳转到对应的行 Step by step:1.Tools -&gt; Custom Commands... -&gt; Add..., New Command name 随便写,我的是”Edit with Vim”2.Run中写入 &quot;D:\\Programs\\Vim\\vim80\\gvim.exe&quot; --remote-silent +%l %f意思是在当前已经打开的gvim窗口里面打开当前的文件,并且跳转到指定行%l为当前的行号,%f为文件名使用 –remote-silent 的作用是,如果已经打开了对应文件,就不会打开第二次,而是在已经打开的文件里跳转到对应行3.还是同一个对话框里面,选择Keys-&gt;Assign New Key...-&gt;按F12,如果你已经将F12设置给其他命令,选择其他的按键就行了4.设置完毕 Vim在vim中调用source insight打开对应的文件: nnoremap &lt;silent&gt; &lt;F12&gt; :!start &quot;C:\\Programs\\Source Insight 4.0\\sourceinsight4.exe&quot; -i +&lt;C-R&gt;=expand(line(&quot;.&quot;))&lt;CR&gt; %&lt;CR&gt; 1.一定要加上start,否则调用source insight时弹出讨厌的dos窗口2.-i表示在已经打开的souce insight中打开3.+后面的部分是指定行号 这样使用F12就可以在vim和source insight之间切换了 :)","categories":[{"name":"工具","slug":"工具","permalink":"http://crispino.github.io/categories/工具/"}],"tags":[{"name":"vim","slug":"vim","permalink":"http://crispino.github.io/tags/vim/"}]}]}